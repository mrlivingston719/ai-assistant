#!/bin/bash

# Personal AI Assistant Setup Script
# Application-specific dependencies only

set -e  # Exit on any error

echo "üöÄ Personal AI Assistant Setup"
echo "==============================="
echo "Installing application dependencies only..."
echo ""

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install Signal CLI
install_signal_cli() {
    echo "üì± Installing Signal CLI..."
    
    # Install Java (required for signal-cli)
    if ! command_exists java; then
        echo "Installing Java 17..."
        sudo apt install -y openjdk-17-jre
    fi
    
    # Download and install signal-cli
    cd /tmp
    SIGNAL_CLI_VERSION="0.12.8"
    wget "https://github.com/AsamK/signal-cli/releases/download/v${SIGNAL_CLI_VERSION}/signal-cli-${SIGNAL_CLI_VERSION}.tar.gz"
    tar xf signal-cli-*.tar.gz
    sudo mv signal-cli-* /opt/signal-cli
    sudo ln -sf /opt/signal-cli/bin/signal-cli /usr/local/bin/
    
    # Verify installation
    if command_exists signal-cli; then
        echo "‚úÖ Signal CLI installed successfully"
        echo "üì± Version: $(signal-cli --version)"
    else
        echo "‚ùå Signal CLI installation failed"
        exit 1
    fi
}

# Function to install Ollama
install_ollama() {
    echo "ü§ñ Installing Ollama..."
    
    # Download and install Ollama
    curl -fsSL https://ollama.ai/install.sh | sh
    
    # Start Ollama service
    sudo systemctl enable ollama
    sudo systemctl start ollama
    
    echo "‚úÖ Ollama installed successfully"
}

# Function to pull Ollama model
pull_ollama_model() {
    echo "üì• Pulling Qwen2.5:14b model..."
    echo "This may take a while (~8GB download)..."
    
    if ollama pull qwen2.5:14b; then
        echo "‚úÖ Qwen2.5:14b model downloaded"
        return 0
    else
        echo "‚ùå Failed to download Qwen2.5:14b model"
        echo "You can download it later with: ollama pull qwen2.5:14b"
        return 1
    fi
}

# Function to prompt for Signal phone number
prompt_signal_phone() {
    echo "üì± Signal Phone Number Configuration"
    echo ""
    echo "Please enter your Signal phone number (including country code):"
    echo "Example: +1234567890"
    echo ""
    
    while true; do
        read -p "Signal phone number: " SIGNAL_PHONE_NUMBER
        
        # Validate phone number format
        if [[ $SIGNAL_PHONE_NUMBER =~ ^\+[1-9][0-9]{9,14}$ ]]; then
            echo "‚úÖ Valid phone number format: $SIGNAL_PHONE_NUMBER"
            break
        else
            echo "‚ùå Invalid format. Please use format: +1234567890 (country code + number)"
            echo "   - Must start with +"
            echo "   - Must be 10-15 digits after country code"
            echo ""
        fi
    done
    
    export SIGNAL_PHONE_NUMBER
    return 0
}

# Function to setup environment file
setup_environment() {
    echo "‚öôÔ∏è  Setting up environment configuration..."
    
    if [[ ! -f .env ]]; then
        cp .env.example .env
        echo "üìù Created .env file from template"
        echo ""
        
        # Prompt for Signal phone number
        prompt_signal_phone
        
        # Update .env file with phone number
        sed -i "s/SIGNAL_PHONE_NUMBER=+1234567890/SIGNAL_PHONE_NUMBER=$SIGNAL_PHONE_NUMBER/" .env
        echo "‚úÖ Signal phone number configured in .env"
        
        # Generate secure postgres password
        postgres_password=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
        sed -i "s/your_secure_postgres_password/$postgres_password/g" .env
        echo "‚úÖ Generated secure PostgreSQL password"
        
        echo ""
        echo "üìù Environment file configured with:"
        echo "   - Signal phone number: $SIGNAL_PHONE_NUMBER"
        echo "   - PostgreSQL password: [generated]"
        echo ""
        echo "Optional: You can add these later:"
        echo "   - NOTION_TOKEN=... (for Notion integration)"
        echo ""
        
    else
        echo "üìù .env file already exists"
        
        # Check if Signal phone number is configured
        if ! grep -q "SIGNAL_PHONE_NUMBER=+" .env 2>/dev/null; then
            echo "‚ö†Ô∏è  Signal phone number not configured. Let's set it up:"
            prompt_signal_phone
            
            # Update existing .env file
            if grep -q "SIGNAL_PHONE_NUMBER=" .env; then
                sed -i "s/SIGNAL_PHONE_NUMBER=.*/SIGNAL_PHONE_NUMBER=$SIGNAL_PHONE_NUMBER/" .env
            else
                echo "SIGNAL_PHONE_NUMBER=$SIGNAL_PHONE_NUMBER" >> .env
            fi
            echo "‚úÖ Signal phone number updated in .env"
        else
            echo "‚úÖ Signal phone number already configured"
        fi
    fi
}

# Function to create necessary directories
create_directories() {
    echo "üìÅ Creating application directories..."
    
    mkdir -p logs
    mkdir -p data/postgres
    mkdir -p data/chroma
    
    echo "‚úÖ Application directories created"
}

# Main setup process
main() {
    echo "Checking prerequisites..."
    echo ""
    
    # Check if Docker is available
    if ! command_exists docker; then
        echo "‚ùå Docker not found. Please install Docker first:"
        echo "   curl -fsSL https://get.docker.com -o get-docker.sh"
        echo "   sh get-docker.sh"
        echo "   sudo usermod -aG docker \$USER"
        echo "   # Then logout and login again"
        exit 1
    else
        echo "‚úÖ Docker found"
    fi
    
    # Check Docker Compose
    if ! docker compose version >/dev/null 2>&1; then
        echo "‚ùå Docker Compose not available"
        exit 1
    else
        echo "‚úÖ Docker Compose found"
    fi
    
    echo ""
    
    # Install Signal CLI if not present
    if ! command_exists signal-cli; then
        install_signal_cli
    else
        echo "‚úÖ Signal CLI already installed"
        echo "üì± Version: $(signal-cli --version)"
    fi
    
    # Install Ollama if not present
    if ! command_exists ollama; then
        install_ollama
    else
        echo "‚úÖ Ollama already installed"
    fi
    
    # Check if Ollama is running
    if ! systemctl is-active --quiet ollama; then
        echo "üîÑ Starting Ollama service..."
        sudo systemctl start ollama
    fi
    
    # Pull Ollama model
    echo "ü§ñ Checking Ollama model..."
    if ! ollama list | grep -q "qwen2.5:14b"; then
        echo "üì• Qwen2.5:14b model not found. Downloading..."
        pull_ollama_model
    else
        echo "‚úÖ Qwen2.5:14b model already available"
    fi
    
    # Setup environment and directories
    setup_environment
    create_directories
    
    echo ""
    echo "üéâ Application setup complete!"
    echo ""
    echo "‚úÖ Signal CLI installed and ready"
    echo "‚úÖ Ollama configured and running"
    echo "‚úÖ Environment configured"
    echo "‚úÖ Application directories created"
    echo ""
    echo "Next steps:"
    echo ""
    echo "1. Link Signal device:"
    echo "   signal-cli link -n \"AI Assistant Server\""
    echo "   # Scan QR code with Signal app"
    echo ""
    echo "2. Test Signal connection:"
    echo "   signal-cli -a \$(grep SIGNAL_PHONE_NUMBER .env | cut -d= -f2) send \$(grep SIGNAL_PHONE_NUMBER .env | cut -d= -f2) -m \"Test\""
    echo ""
    echo "3. Start application:"
    echo "   docker compose up -d"
    echo ""
    echo "4. Check health:"
    echo "   curl http://localhost:8080/health"
    echo ""
    echo "For management:"
    echo "- View logs: docker compose logs -f"
    echo "- Stop: docker compose down"
    echo "- Restart: docker compose restart"
    echo ""
}

# Run main function
main "$@"